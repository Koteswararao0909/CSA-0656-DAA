#include <stdio.h>
#include <stdbool.h>
#define MAX_SIZE 20
void printBoard(int board[MAX_SIZE][MAX_SIZE], int n) {
    printf("Solution:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1) {
                printf("Q ");
            } else {
                printf(". ");
            }
        }
        printf("\n");
    }
    printf("\n");
}
bool isSafe(int board[MAX_SIZE][MAX_SIZE], int row, int col, int n) {
    int i, j;
    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }
    for (i = row, j = col; j >= 0 && i < n; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }
    return true;
}
bool solveNQueens(int board[MAX_SIZE][MAX_SIZE], int col, int n) {
    // Base case: If all queens are placed
    if (col >= n) {
        return true;
    }
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1;
            if (solveNQueens(board, col + 1, n)) {
                return true;
            }
            board[i][col] = 0;
        }
    }
    return false;
}
int main() {
    int n;
    int board[MAX_SIZE][MAX_SIZE] = {0};
    printf("Name : P. Koteswara Rao\n");
    printf("Reg no : 192211581\n");
    printf("Enter the number of queens (N): ");
    scanf("%d", &n);
    if (n <= 0 || n > MAX_SIZE) {
        printf("Invalid size. Please enter a number between 1 and %d.\n", MAX_SIZE);
        return 1;
    }
    if (solveNQueens(board, 0, n)) {
        printBoard(board, n);
    } else {
        printf("No solution exists for %d queens.\n", n);
    }
    return 0;
}
